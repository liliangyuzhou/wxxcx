from __future__ import absolute_import
import logging
from urllib.parse import quote
import os.path
import requests
import json
from requests.exceptions import HTTPError
logger=logging.getLogger("tgit")
proxies={"http":"http://dev-proxy.oa.com:8080","https":"http://dev-proxy.oa.com:8080",}
class TgitClient(object):
 url="https://git.code.tencent.com/api"
 version=3
 def __init__(self,auth,**options):
  self.auth=auth
  self.opener=None
  self.options=options
 def build_opener(self):
  if self.opener is None:
   self.opener=requests.Session()
   self.opener.auth=self.auth
  return self.opener
 def to_url(self,_path):
  return "%s/v%s%s"%(self.url,self.version,_path)
 def request(self,method,_path,headers=None,**data):
  url=self.to_url(_path)
  request_kwargs={"proxies":proxies}
  if data:
   keys=list(data.keys())
   for key in keys:
    if key.startswith("_"):
     val=data.pop(key)
     key=key[1:]
     request_kwargs[key]=val
    placeholder=":%s"%key
    if placeholder in url:
     url=url.replace(placeholder,quote(str(data[key]),safe=""))
     data.pop(key)
  method=method.lower()
  try:
   if not data:
    data=None
   options={"params":data if method in["get","delete","options","head"]else None,"data":data if method in["post","put","patch"]else None,}
   options.update(request_kwargs)
   if options.get("data"):
    options["data"]=json.dumps(options["data"])
   options.update(self.options)
   request=getattr(self.build_opener(),method)
   response=request(url,headers=headers,**options)
   response.raise_for_status()
   if response.status_code==204: 
    return None
   elif method=="delete": 
    return None
   return response.json()
  except HTTPError as e:
   logger.error("call %s fail"%url)
   raise
 def get(self,_path,**params):
  return self.request("GET",_path,**params)
 def post(self,_path,**data):
  return self.request("POST",_path,**data)
 def put(self,_path,**data):
  return self.request("PUT",_path,**data)
 def delete(self,_path,**data):
  return self.request("DELETE",_path,**data)
 def create_groups(self,**kwargs):
  return self.post("/groups",**kwargs)
 def update_groups(self,**kwargs):
  return self.put("/groups",**kwargs)
 def delete_groups(self,id,**kwargs):
  return self.delete("/groups/:id",id=id,**kwargs)
 def list_groups(self,**kwargs):
  return self.get("/groups",**kwargs)
 def search_groups(self,search,**kwargs):
  return self.get("/groups",search=search,**kwargs)
 def list_groups_members(self,id,**kwargs):
  return self.get("/groups/:id/members",id=id,**kwargs)
 def create_groups_members(self,id,**kwargs):
  return self.post("/groups/:id/members",id=id,**kwargs)
 def update_groups_members(self,id,user_id,**kwargs):
  return self.put("/groups/:id/members/:user_id",id=id,user_id=user_id,**kwargs)
 def delete_groups_members(self,id,user_id,**kwargs):
  return self.delete("/groups/:id/members/:user_id",id=id,user_id=user_id,**kwargs)
 def get_groups(self,id,**kwargs):
  return self.get("/groups/:id",id=id,**kwargs)
 def create_groups_projects(self,id,project_id,**kwargs):
  return self.post("/groups/:id/projects/:project_id",id=id,project_id=project_id,**kwargs)
 def list_namespaces(self,**kwargs):
  return self.get("/namespaces",**kwargs)
 def search_namespaces(self,search,**kwargs):
  return self.get("/namespaces",search=search,**kwargs)
 def list_users(self,**kwargs):
  return self.get("/users",**kwargs)
 def list_users(self,**kwargs):
  return self.get("/users",**kwargs)
 def get_user_watched(self,**kwargs):
  return self.get("/user/watched",**kwargs)
 def create_users(self,**kwargs):
  return self.post("/users",**kwargs)
 def update_users(self,id,**kwargs):
  return self.put("/users/:id",id=id,**kwargs)
 def delete_users(self,id,**kwargs):
  return self.delete("/users/:id",id=id,**kwargs)
 def get_users(self,id,**kwargs):
  return self.get("/users/:id",id=id,**kwargs)
 def get_user(self,**kwargs):
  return self.get("/user",**kwargs)
 def create_user_keys(self,**kwargs):
  return self.post("/user/keys",**kwargs)
 def create_users_keys(self,id,**kwargs):
  return self.post("/users/:id/keys",id=id,**kwargs)
 def list_user_keys(self,**kwargs):
  return self.get("/user/keys",**kwargs)
 def get_user_keys(self,id,**kwargs):
  return self.get("/user/keys/:id",id=id,**kwargs)
 def list_users_keys(self,uid,**kwargs):
  return self.get("/users/:uid/keys",uid=uid,**kwargs)
 def delete_user_keys(self,id,**kwargs):
  return self.delete("/user/keys/:id",id=id,**kwargs)
 def delete_users_keys(self,uid,id,**kwargs):
  return self.delete("/users/:uid/keys/:id",uid=uid,id=id,**kwargs)
 def create_user_emails(self,**kwargs):
  return self.post("/user/emails",**kwargs)
 def create_users_emails(self,id,**kwargs):
  return self.post("/users/:id/emails",id=id,**kwargs)
 def get_user_email(self,**kwargs):
  return self.get("/user/email",**kwargs)
 def list_user_emails(self,**kwargs):
  return self.get("/user/emails",**kwargs)
 def list_users_emails(self,uid,**kwargs):
  return self.get("/users/:uid/emails",uid=uid,**kwargs)
 def get_user_emails(self,id,**kwargs):
  return self.get("/user/emails/:id",id=id,**kwargs)
 def delete_user_emails(self,id,**kwargs):
  return self.delete("/user/emails/:id",id=id,**kwargs)
 def delete_users_emails(self,uid,id,**kwargs):
  return self.delete("/users/:uid/emails/:id",uid=uid,id=id,**kwargs)
 def update_users_block(self,uid,**kwargs):
  return self.put("/users/:uid/block",uid=uid,**kwargs)
 def update_users_unblock(self,uid,**kwargs):
  return self.put("/users/:uid/unblock",uid=uid,**kwargs)
 def create_users_identity(self,uid,**kwargs):
  return self.post("/users/:uid/identity",uid=uid,**kwargs)
 def create_projects_issues(self,id,**kwargs):
  return self.post("/projects/:id/issues",id=id,**kwargs)
 def update_projects_issues(self,id,issue_id,**kwargs):
  return self.put("/projects/:id/issues/:issue_id",id=id,issue_id=issue_id,**kwargs)
 def list_issues(self,**kwargs):
  return self.get("/issues",**kwargs)
 def list_projects_issues(self,id,**kwargs):
  return self.get("/projects/:id/issues",id=id,**kwargs)
 def get_projects_issues(self,id,**kwargs):
  return self.get("/projects/:id/issues",id=id,**kwargs)
 def get_projects_issue(self,id,issue_id,**kwargs):
  return self.get("/projects/:id/issues/:issue_id",id=id,issue_id=issue_id,**kwargs)
 def get_projects_issues_subscribe(self,id,issue_id,**kwargs):
  return self.get("/projects/:id/issues/:issue_id/subscribe",id=id,issue_id=issue_id,**kwargs)
 def update_projects_issues_subscribe(self,id,issue_id,**kwargs):
  return self.put("/projects/:id/issues/:issue_id/subscribe",id=id,issue_id=issue_id,**kwargs)
 def update_projects_issues_unsubscribe(self,id,issue_id,**kwargs):
  return self.put("/projects/:id/issues/:issue_id/unsubscribe",id=id,issue_id=issue_id,**kwargs)
 def create_projects_labels(self,id,**kwargs):
  return self.post("/projects/:id/labels",id=id,**kwargs)
 def update_projects_labels(self,id,**kwargs):
  return self.put("/projects/:id/labels",id=id,**kwargs)
 def list_projects_labels(self,id,**kwargs):
  return self.get("/projects/:id/labels",id=id,**kwargs)
 def delete_projects_labels(self,id,**kwargs):
  return self.delete("/projects/:id/labels",id=id,**kwargs)
 def create_projects_milestones(self,id,**kwargs):
  return self.post("/projects/:id/milestones",id=id,**kwargs)
 def update_projects_milestones(self,id,milestone_id,**kwargs):
  return self.put("/projects/:id/milestones/:milestone_id",id=id,milestone_id=milestone_id,**kwargs)
 def get_projects_milestone(self,id,milestone_id,**kwargs):
  return self.get("/projects/:id/milestones/:milestone_id",id=id,milestone_id=milestone_id,**kwargs)
 def get_projects_milestones(self,id,**kwargs):
  return self.get("/projects/:id/milestones",id=id,**kwargs)
 def delete_projects_milestones(self,id,milestone_id,**kwargs):
  return self.delete("/projects/:id/milestones/:milestone_id",id=id,milestone_id=milestone_id,**kwargs)
 def list_projects_milestones_issues(self,id,milestone_id,**kwargs):
  return self.get("/projects/:id/milestones/:milestone_id/issues",id=id,milestone_id=milestone_id,**kwargs)
 def list_projects_milestones(self,id,**kwargs):
  return self.get("/projects/:id/milestones",id=id,**kwargs)
 def list_projects_watchers(self,id,**kwargs):
  return self.get("/projects/:id/watchers",id=id,**kwargs)
 def get_projects_watch(self,id,**kwargs):
  return self.get("/projects/:id/watch",id=id,**kwargs)
 def update_projects_watch(self,id,**kwargs):
  return self.put("/projects/:id/watch",id=id,**kwargs)
 def delete_projects_watch(self,id,**kwargs):
  return self.delete("/projects/:id/watch",id=id,**kwargs)
 def get_projects_repository_archive(self,id,**kwargs):
  return self.get("/projects/:id/repository/archive",id=id,**kwargs)
 def list_projects_repository_contributors(self,id,**kwargs):
  return self.get("/projects/:id/repository/contributors",id=id,**kwargs)
 def get_projects_repository_blobs(self,id,sha,**kwargs):
  return self.get("/projects/:id/repository/blobs/:sha",id=id,sha=sha,**kwargs)
 def get_projects_repository_raw_blobs(self,id,sha,**kwargs):
  return self.get("/projects/:id/repository/raw_blobs/:sha",id=id,sha=sha,**kwargs)
 def get_projects_repository_compare(self,id,_from,to,straight,**kwargs):
  return self.get("/projects/:id/repository/compare",id=id,_from=_from,to=to,straight=straight,**kwargs)
 def get_projects_repository_compare_commits(self,id,**kwargs):
  return self.get("/projects/:id/repository/compare/commits",id=id,**kwargs)
 def get_projects_repository_tree(self,id,**kwargs):
  return self.get("/projects/:id/repository/tree",id=id,**kwargs)
 def list_projects_repository_files(self,id,**kwargs):
  return self.get("/projects/:id/repository/files",id=id,**kwargs)
 def create_projects_repository_files(self,id,**kwargs):
  return self.post("/projects/:id/repository/files",id=id,**kwargs)
 def upload_images(self,id,image_path):
  return self.post("/projects/:id/uploads",id=id,_files={"file":("file",open(image_path,"rb"),"image/png")},)
 def upload_file(self,id,path,content_type):
  return self.post("/projects/:id/uploads",id=id,_files={"file":(os.path.basename(path),open(path,"rb"),content_type)},)
 def delete_projects_repository_files(self,id,**kwargs):
  return self.delete("/projects/:id/repository/files",id=id,**kwargs)
 def update_projects_repository_files(self,id,**kwargs):
  return self.put("/projects/:id/repository/files",id=id,**kwargs)
 def create_projects_repository_branches(self,id,**kwargs):
  return self.post("/projects/:id/repository/branches",id=id,**kwargs)
 def delete_projects_repository_branches(self,id,branch,**kwargs):
  return self.delete("/projects/:id/repository/branches/:branch",id=id,branch=branch,**kwargs)
 def list_projects_repository_branches(self,id,**kwargs):
  return self.get("/projects/:id/repository/branches",id=id,**kwargs)
 def get_projects_repository_branches(self,id,branch,**kwargs):
  return self.get("/projects/:id/repository/branches/:branch",id=id,branch=branch,**kwargs)
 def update_projects_repository_branches_protect(self,id,branch,**kwargs):
  return self.put("/projects/:id/repository/branches/:branch/protect",id=id,branch=branch,**kwargs)
 def update_projects_repository_branches_unprotect(self,id,branch,**kwargs):
  return self.put("/projects/:id/repository/branches/:branch/unprotect",id=id,branch=branch,**kwargs)
 def create_projects_branches_protected_members(self,id,branch_name,**kwargs):
  return self.post("/projects/:id/branches/protected/:branch_name/members",id=id,branch_name=branch_name,**kwargs)
 def list_projects_branches_protected_members(self,id,protected_branch_name,**kwargs):
  return self.get("/projects/:id/branches/protected/:protected_branch_name/members",id=id,protected_branch_name=protected_branch_name,**kwargs)
 def update_projects_branches_protected_members(self,id,protected_branch_name,user_id,**kwargs):
  return self.put("/projects/:id/branches/protected/:protected_branch_name/members/:user_id",id=id,protected_branch_name=protected_branch_name,user_id=user_id,**kwargs)
 def delete_projects_branches_protected_members(self,id,protected_branch_name,user_id,**kwargs):
  return self.delete("/projects/:id/branches/protected/:protected_branch_name/members/:user_id",id=id,protected_branch_name=protected_branch_name,user_id=user_id,**kwargs)
 def get_projects_tloc_branch_lifecycle(self,id,**kwargs):
  return self.get("/projects/:id/tloc/branch/lifecycle",id=id,**kwargs)
 def list_projects_releases(self,id,**kwargs):
  return self.get("/projects/:id/releases",id=id,**kwargs)
 def get_projects_releases(self,id,tag_name,**kwargs):
  return self.get("/projects/:id/releases/:tag_name",id=id,tag_name=tag_name,**kwargs)
 def create_projects_releases(self,id,**kwargs):
  return self.post("/projects/:id/releases",id=id,**kwargs)
 def update_projects_releases(self,id,tag_name,**kwargs):
  return self.put("/projects/:id/releases/:tag_name",id=id,tag_name=tag_name,**kwargs)
 def delete_projects_releases(self,id,tag_name,**kwargs):
  return self.delete("/projects/:id/releases/:tag_name",id=id,tag_name=tag_name,**kwargs)
 def create_projects_releases_attachments(self,id,tag_name,**kwargs):
  return self.post("/projects/:id/releases/:tag_name/attachments",id=id,tag_name=tag_name,**kwargs)
 def get_projects_releases_attachments(self,id,tag_name,attachment_name,**kwargs):
  return self.get("/projects/:id/releases/:tag_name/attachments/:attachment_name",id=id,tag_name=tag_name,attachment_name=attachment_name,**kwargs)
 def delete_projects_releases_attachments(self,id,tag_name,attachment_name,**kwargs):
  return self.delete("/projects/:id/releases/:tag_name/attachments/:attachment_name",id=id,tag_name=tag_name,attachment_name=attachment_name,**kwargs)
 def get_projects_repository_commits(self,id,sha,**kwargs):
  return self.get("/projects/:id/repository/commits/:sha",id=id,sha=sha,**kwargs)
 def get_projects_repository_commits_diff(self,id,sha,**kwargs):
  return self.get("/projects/:id/repository/commits/:sha/diff",id=id,sha=sha,**kwargs)
 def create_projects_repository_commits_comments(self,id,sha,**kwargs):
  return self.post("/projects/:id/repository/commits/:sha/comments",id=id,sha=sha,**kwargs)
 def list_projects_repository_commits_comments(self,id,sha,**kwargs):
  return self.get("/projects/:id/repository/commits/:sha/comments",id=id,sha=sha,**kwargs)
 def list_projects_repository_commits(self,id,**kwargs):
  return self.get("/projects/:id/repository/commits",id=id,**kwargs)
 def list_projects_repository_commits_refs(self,id,sha,**kwargs):
  return self.get("/projects/:id/repository/commits/:sha/refs",id=id,sha=sha,**kwargs)
 def list_projects_members(self,id,**kwargs):
  return self.get("/projects/:id/members",id=id,**kwargs)
 def create_projects_members(self,id,**kwargs):
  return self.post("/projects/:id/members",id=id,**kwargs)
 def create_projects_members(self,id,**kwargs):
  return self.post("/projects/:id/members",id=id,**kwargs)
 def update_projects_members(self,id,user_id,**kwargs):
  return self.put("/projects/:id/members/:user_id",id=id,user_id=user_id,**kwargs)
 def delete_projects_members(self,id,user_id,**kwargs):
  return self.delete("/projects/:id/members/:user_id",id=id,user_id=user_id,**kwargs)
 def get_projects_members(self,id,user_id,**kwargs):
  return self.get("/projects/:id/members/:user_id",id=id,user_id=user_id,**kwargs)
 def create_projects(self,**kwargs):
  return self.post("/projects",**kwargs)
 def update_projects(self,id,**kwargs):
  return self.put("/projects/:id",id=id,**kwargs)
 def create_projects_user(self,user_id,**kwargs):
  return self.post("/projects/user/:user_id",user_id=user_id,**kwargs)
 def list_projects(self,**kwargs):
  return self.get("/projects",**kwargs)
 def get_projects_owned(self,**kwargs):
  return self.get("/projects/owned",**kwargs)
 def get_projects_public(self,**kwargs):
  return self.get("/projects/public",**kwargs)
 def get_projects_inner_source(self,**kwargs):
  return self.get("/projects/inner_source",**kwargs)
 def delete_projects(self,id,**kwargs):
  return self.delete("/projects/:id",id=id,**kwargs)
 def get_projects(self,id,**kwargs):
  return self.get("/projects/:id",id=id,**kwargs)
 def list_projects_shares(self,id,**kwargs):
  return self.get("/projects/:id/shares",id=id,**kwargs)
 def create_projects_share(self,id,**kwargs):
  return self.post("/projects/:id/share",id=id,**kwargs)
 def delete_projects_share(self,id,group_id,**kwargs):
  return self.delete("/projects/:id/share/:group_id",id=id,group_id=group_id,**kwargs)
 def list_projects(self,**kwargs):
  return self.get("/projects",**kwargs)
 def list_projects_events(self,id,**kwargs):
  return self.get("/projects/:id/events",id=id,**kwargs)
 def update_projects_star(self,id,**kwargs):
  return self.put("/projects/:id/star",id=id,**kwargs)
 def delete_projects_star(self,id,**kwargs):
  return self.delete("/projects/:id/star",id=id,**kwargs)
 def get_projects_star(self,id,**kwargs):
  return self.get("/projects/:id/star",id=id,**kwargs)
 def list_projects_stars(self,id,**kwargs):
  return self.get("/projects/:id/stars",id=id,**kwargs)
 def create_projects_fork(self,id,**kwargs):
  return self.post("/projects/fork/:id",id=id,**kwargs)
 def create_projects_fork(self,id,forked_from_id,**kwargs):
  return self.post("/projects/:id/fork/:forked_from_id",id=id,forked_from_id=forked_from_id,**kwargs)
 def delete_projects_fork(self,id,**kwargs):
  return self.delete("/projects/:id/fork",id=id,**kwargs)
 def create_projects_commit_statuses(self,id,sha,**kwargs):
  return self.post("/projects/:id/commit/:sha/statuses",id=id,sha=sha,**kwargs)
 def list_projects_commits_status(self,id,ref,**kwargs):
  return self.get("/projects/:id/commits/:ref/status",id=id,ref=ref,**kwargs)
 def list_projects_commits_statuses(self,id,ref,**kwargs):
  return self.get("/projects/:id/commits/:ref/statuses",id=id,ref=ref,**kwargs)
 def create_projects_hooks(self,id,**kwargs):
  return self.post("/projects/:id/hooks",id=id,**kwargs)
 def update_projects_hooks(self,id,hook_id,**kwargs):
  return self.put("/projects/:id/hooks/:hook_id",id=id,hook_id=hook_id,**kwargs)
 def get_projects_hooks(self,id,hook_id,**kwargs):
  return self.get("/projects/:id/hooks/:hook_id",id=id,hook_id=hook_id,**kwargs)
 def list_projects_hooks(self,id,**kwargs):
  return self.get("/projects/:id/hooks",id=id,**kwargs)
 def delete_projects_hooks(self,id,hook_id,**kwargs):
  return self.delete("/projects/:id/hooks/:hook_id",id=id,hook_id=hook_id,**kwargs)
 def create_projects_merge_requests(self,id,**kwargs):
  return self.post("/projects/:id/merge_requests",id=id,**kwargs)
 def update_projects_merge_request_merge(self,id,merge_request_id,**kwargs):
  return self.put("/projects/:id/merge_request/:merge_request_id/merge",id=id,merge_request_id=merge_request_id,**kwargs)
 def list_projects_merge_request_commits(self,id,merge_request_id,**kwargs):
  return self.get("/projects/:id/merge_request/:merge_request_id/commits",id=id,merge_request_id=merge_request_id,**kwargs)
 def create_projects_merge_request_comments(self,id,merge_request_id,**kwargs):
  return self.post("/projects/:id/merge_request/:merge_request_id/comments",id=id,merge_request_id=merge_request_id,**kwargs)
 def list_projects_merge_request_comments(self,id,merge_request_id,**kwargs):
  return self.get("/projects/:id/merge_request/:merge_request_id/comments",id=id,merge_request_id=merge_request_id,**kwargs)
 def update_projects_merge_request(self,id,merge_request_id,**kwargs):
  return self.put("/projects/:id/merge_request/:merge_request_id",id=id,merge_request_id=merge_request_id,**kwargs)
 def list_projects_merge_requests(self,id,**kwargs):
  return self.get("/projects/:id/merge_requests",id=id,**kwargs)
 def list_projects_merge_request_changes(self,id,merge_request_id,**kwargs):
  return self.get("/projects/:id/merge_request/:merge_request_id/changes",id=id,merge_request_id=merge_request_id,**kwargs)
 def get_projects_merge_request(self,id,merge_request_id,**kwargs):
  return self.get("/projects/:id/merge_request/:merge_request_id",id=id,merge_request_id=merge_request_id,**kwargs)
 def get_projects_merge_request_subscribe(self,id,merge_request_id,**kwargs):
  return self.get("/projects/:id/merge_request/:merge_request_id/subscribe",id=id,merge_request_id=merge_request_id,**kwargs)
 def update_projects_merge_request_subscribe(self,id,merge_request_id,**kwargs):
  return self.put("/projects/:id/merge_request/:merge_request_id/subscribe",id=id,merge_request_id=merge_request_id,**kwargs)
 def update_projects_merge_request_unsubscribe(self,id,merge_request_id,**kwargs):
  return self.put("/projects/:id/merge_request/:merge_request_id/unsubscribe",id=id,merge_request_id=merge_request_id,**kwargs)
 def create_projects_merge_requests_notes(self,id,merge_request_id,**kwargs):
  return self.post("/projects/:id/merge_requests/:merge_request_id/notes",id=id,merge_request_id=merge_request_id,**kwargs)
 def update_projects_merge_requests_notes(self,id,merge_request_id,note_id,**kwargs):
  return self.put("/projects/:id/merge_requests/:merge_request_id/notes/:note_id",id=id,merge_request_id=merge_request_id,note_id=note_id,**kwargs)
 def get_projects_merge_requests_notes(self,id,merge_request_id,note_id,**kwargs):
  return self.get("/projects/:id/merge_requests/:merge_request_id/notes/:note_id",id=id,merge_request_id=merge_request_id,note_id=note_id,**kwargs)
 def get_projects_merge_requests_commits(self,id,merge_request_id,**kwargs):
  return self.get("/projects/:id/merge_request/:merge_request_id/commits",id=id,merge_request_id=merge_request_id,**kwargs)
 def list_projects_merge_requests_notes(self,id,merge_request_id,**kwargs):
  return self.get("/projects/:id/merge_requests/:merge_request_id/notes",id=id,merge_request_id=merge_request_id,**kwargs)
 def get_projects_reviews_notes(self,id,review_id,note_id,**kwargs):
  return self.get("/projects/:id/reviews/:review_id/notes/:note_id",id=id,review_id=review_id,note_id=note_id,**kwargs)
 def list_projects_reviews_notes(self,id,review_id,**kwargs):
  return self.get("/projects/:id/reviews/:review_id/notes",id=id,review_id=review_id,**kwargs)
 def create_projects_reviews_notes(self,id,review_id,**kwargs):
  return self.post("/projects/:id/reviews/:review_id/notes",id=id,review_id=review_id,**kwargs)
 def update_projects_reviews_notes_note_id(self,id,review_id,**kwargs):
  return self.put("/projects/:id/reviews/:review_id/notes/note_id",id=id,review_id=review_id,**kwargs)
 def create_projects_issues_notes(self,id,issue_id,**kwargs):
  return self.post("/projects/:id/issues/:issue_id/notes",id=id,issue_id=issue_id,**kwargs)
 def update_projects_issues_notes(self,id,issue_id,note_id,**kwargs):
  return self.put("/projects/:id/issues/:issue_id/notes/:note_id",id=id,issue_id=issue_id,note_id=note_id,**kwargs)
 def get_projects_issues_notes(self,id,issue_id,note_id,**kwargs):
  return self.get("/projects/:id/issues/:issue_id/notes/:note_id",id=id,issue_id=issue_id,note_id=note_id,**kwargs)
 def list_projects_issues_notes(self,id,issue_id,**kwargs):
  return self.get("/projects/:id/issues/:issue_id/notes",id=id,issue_id=issue_id,**kwargs)
 def create_projects_merge_request_review_invite(self,id,merge_request_id,**kwargs):
  return self.post("/projects/:id/merge_request/:merge_request_id/review/invite",id=id,merge_request_id=merge_request_id,**kwargs)
 def delete_projects_merge_request_review_dismissals(self,id,merge_request_id,**kwargs):
  return self.delete("/projects/:id/merge_request/:merge_request_id/review/dismissals",id=id,merge_request_id=merge_request_id,**kwargs)
 def delete_projects_merge_request_review_cancel(self,id,merge_request_id,**kwargs):
  return self.delete("/projects/:id/merge_request/:merge_request_id/review/cancel",id=id,merge_request_id=merge_request_id,**kwargs)
 def get_projects_merge_request_review(self,id,merge_request_id,**kwargs):
  return self.get("/projects/:id/merge_request/:merge_request_id/review",id=id,merge_request_id=merge_request_id,**kwargs)
 def update_projects_merge_request_reviewer_summary(self,id,merge_request_id,**kwargs):
  return self.put("/projects/:id/merge_request/:merge_request_id/reviewer/summary",id=id,merge_request_id=merge_request_id,**kwargs)
 def update_projects_merge_request_review_reopen(self,id,merge_request_id,**kwargs):
  return self.put("/projects/:id/merge_request/:merge_request_id/review/reopen",id=id,merge_request_id=merge_request_id,**kwargs)
 def create_projects_review(self,id,**kwargs):
  return self.post("/projects/:id/review",id=id,**kwargs)
 def list_projects_reviews(self,id,**kwargs):
  return self.get("/projects/:id/reviews",id=id,**kwargs)
 def get_projects_review(self,id,review_id,**kwargs):
  return self.get("/projects/:id/review/:review_id",id=id,review_id=review_id,**kwargs)
 def create_projects_review_invite(self,id,review_id,**kwargs):
  return self.post("/projects/:id/review/:review_id/invite",id=id,review_id=review_id,**kwargs)
 def delete_projects_review_dismissals(self,id,review_id,**kwargs):
  return self.delete("/projects/:id/review/:review_id/dismissals",id=id,review_id=review_id,**kwargs)
 def update_projects_review_reviewer_summary(self,id,review_id,**kwargs):
  return self.put("/projects/:id/review/:review_id/reviewer/summary",id=id,review_id=review_id,**kwargs)
 def update_projects_review_reopen(self,id,review_id,**kwargs):
  return self.put("/projects/:id/review/:review_id/reopen",id=id,review_id=review_id,**kwargs)
 def update_projects_review(self,id,review_id,**kwargs):
  return self.put("/projects/:id/review/:review_id",id=id,review_id=review_id,**kwargs)
 def get_projects_tloc_daily_count(self,id,**kwargs):
  return self.get("/projects/:id/tloc/daily/count",id=id,**kwargs)
 def get_projects_tloc_daily_diff(self,id,**kwargs):
  return self.get("/projects/:id/tloc/daily/diff",id=id,**kwargs)
 def get_projects_tloc_user_diff(self,id,**kwargs):
  return self.get("/projects/:id/tloc/user/diff",id=id,**kwargs)
 def get_projects_tloc_lang_diff(self,id,**kwargs):
  return self.get("/projects/:id/tloc/lang/diff",id=id,**kwargs)
 def get_projects_tloc_commit_diff(self,id,**kwargs):
  return self.get("/projects/:id/tloc/commit/diff",id=id,**kwargs)
# Created by pyminifier (https://github.com/liftoff/pyminifier)
