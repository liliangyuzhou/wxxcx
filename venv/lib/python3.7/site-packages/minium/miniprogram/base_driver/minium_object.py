#!/usr/local/bin/python3
# -*- coding: utf-8 -*-
from.minium_log import MonitorMetaClass
import subprocess
import time
from functools import wraps
import logging
logger=logging.getLogger()
def timeout(duration):
 def spin_until_true(func):
  @wraps(func)
  def wrapper(*args,**kwargs):
   timeout=time.time()+duration
   r=func(*args,**kwargs)
   while not r:
    time.sleep(1)
    if timeout<time.time():
     logger.warning("timeout for %s"%func.__name__)
     break
    r=func(*args,**kwargs)
   return r
  return wrapper
 return spin_until_true
class MiniumObject(object,metaclass=MonitorMetaClass):
 def __init__(self):
  self.logger=logger
  self.observers={}
  self.connection=None
 def _do_shell(self,command,print_msg=True):
  self.logger.info("de shell: %s"%command)
  p=subprocess.Popen(command,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
  lines=[]
  for line in iter(p.stdout.readline,b""):
   try:
    line=line.rstrip().decode("utf8")
   except UnicodeDecodeError:
    line=line.rstrip().decode("gbk")
   logger.debug(line)
   lines.append(line)
  return lines
 def call_wx_method(self,method,args=None):
  return self._call_wx_method(method=method,args=args)
 def mock_wx_method(self,method,functionDeclaration:str=None,result=None,args=None,success=True,):
  self._mock_wx_method(method=method,functionDeclaration=functionDeclaration,result=result,args=args,success=success,)
 def restore_wx_method(self,method):
  self.connection.send("App.mockWxMethod",{"method":method})
 def hook_wx_method(self,method,before=None,after=None):
  def super_before(msg):
   self.logger.debug(f"{method} before hook result: {msg['args']}")
   if before:
    before(msg["args"])
  if before and not callable(before):
   self.logger.error(f"wx.{method} hook before method is non-callable")
   return
  self._expose_function(method+"_"+super_before.__name__,super_before)
  def super_after(msg):
   self.logger.debug(f"wx.{method} after hook result: {msg['args']}")
   if after:
    after(msg["args"])
  if after and not callable(after):
   self.logger.error(f"{method} hook after method is non-callable")
   return
  self._expose_function(method+"_"+super_after.__name__,super_after)
  self.evaluate( """function () {
 var origin = wx.%s; Object.defineProperty(wx, "%s", { get() { return function (...args) { %s(...args); res = origin(...args); %s(res); return res } } })    }"""  
  %(method,method,method+"_"+super_before.__name__,method+"_"+super_after.__name__,))
 def evaluate(self,app_function:str,args=None,sync=False):
  return self._evaluate(app_function=app_function,args=args,sync=sync)
 def _call_wx_method(self,method,args=None):
  if args is None:
   args=[]
  if not isinstance(args,list):
   if isinstance(args,str):
    args=[args]
   elif "Sync" in method:
    if isinstance(args,dict):
     temp_args=list()
     for key in args.keys():
      temp_args.append(args[key])
     args=temp_args
   else:
    args=[args]
  params={"method":method,"args":args}
  return self.connection.send("App.callWxMethod",params)
 def _evaluate(self,app_function:str,args=None,sync=False):
  if not args:
   args=[]
  if sync:
   return self.connection.send("App.callFunction",{"functionDeclaration":app_function,"args":args})
  else:
   return self.connection.send_async("App.callFunction",{"functionDeclaration":app_function,"args":args})
 def _expose_function(self,name,binding_function):
  self.connection.register(name,binding_function)
  self.connection.send("App.addBinding",{"name":name})
 def _mock_wx_method(self,method,functionDeclaration:str,result=None,args=None,success=True):
  if not args:
   args=[]
  else:
   args=[args]
  callback_type="ok" if success else "fail"
  if functionDeclaration:
   self.connection.send("App.mockWxMethod",{"method":method,"functionDeclaration":functionDeclaration,"args":args,},)
  else:
   if isinstance(result,str):
    self.connection.send("App.mockWxMethod",{"method":method,"result":{"result":result,"errMsg":"%s:%s"%(method,callback_type),},},)
   elif isinstance(result,dict):
    self.connection.send("App.mockWxMethod",{"method":method,"result":result})
   else:
    self.logger.warning("mock wx method accept str or dict result only")
# Created by pyminifier (https://github.com/liftoff/pyminifier)
